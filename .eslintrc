{
  "extends": [
    "eslint-config-airbnb",
    "eslint:recommended",
    "prettier",
    "plugin:prettier/recommended"
  ],
  "plugins": ["@typescript-eslint", "react-hooks", "prettier"],
  "parser": "@typescript-eslint/parser",
  "env": {
    "jest": true,
    "browser": true
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "globals": {
    "JSX": "readonly"
  },
  "rules": {
    // note you must disable the base rule as it can report incorrect errors
    "no-use-before-define": "off",
    // for...in and for...of are useful for iteration; prefer functional iterators for mutations, but with modern immutable patterns like immer, mutations are often in-place in the draft
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement"
    ],
    "no-continue": "off", // if we're using for...of, we need continue
    "no-await-in-loop": "off", // this is needed for synchronous iteration where order matters
    "no-return-assign": ["error", "except-parens"], // Default option
    "no-console": "off", // Console logs are too useful and are removed in prod anyway
    "global-require": "off", // Useful for images, assets, etc
    "import/no-dynamic-require": "off", // Useful for images, assets, etc
    "import/prefer-default-export": "off", // Often this is not organizationally optimal
    "no-shadow": "off", // Shadowing is a nice language feature. Naming is hard.
    "no-underscore-dangle": "off", // It's classic pattern to denote private props.
    "react/prop-types": "off", // We're using Typescript instead
    "react/require-default-props": "off", // Not useful without prop-types
    "react/jsx-filename-extension": "off", // We're using .js for jsx files
    "react/no-children-prop": "off", // Certain libs (like router) use this pattern
    "react/no-array-index-key": "off", // It's up to the coder to ensure keys stay unique to value
    "react/no-multi-comp": "off", // It's often useful to group small, tightly related components
    "prefer-destructuring": "off", // This forces awkward syntax sometimes
    "no-case-declarations": "off", // Fallthrough is useful in case/default clauses
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ], // Useful for mutating reduce accumulators, ex.
    "react-hooks/rules-of-hooks": "error",
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/alt-text": "off", // we will enforce alt text at the primitive level
    "default-case": "off", // switch mostly used for immer produce, which doesn't require a default
    "no-unused-vars": "off", // use Typescript check instead
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false
      }
    ], // hoisting is useful for keeping exported functions at the beginning of the file
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "argsIgnorePattern": "^_", // ignore all arguments that start with "_"
        "ignoreRestSiblings": false
      }
    ],
    "prettier/prettier": ["error"],
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "js": "never",
        "mjs": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ]
  }
}

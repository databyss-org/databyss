import React from 'react'
import { Button, Text, View } from '@databyss-org/ui/primitives'
import { isMobileOs } from '@databyss-org/ui/'
import { pxUnits } from '@databyss-org/ui/theming/views'
import EditorTooltip from '../EditorTooltip'
import { useEditorContext } from '../EditorProvider'
import { toggleMark, startTag } from '../state/actions'

const mobileActions = [
  {
    type: 'SOURCE',
    label: '+ source',
    variant: 'uiTextNormal',
    action: a => startTag(a),
  },
  {
    type: 'TOPIC',
    label: '+ topic',
    variant: 'uiTextNormal',
    action: a => startTag(a),
  },
  {
    type: 'LOCATION',
    label: '+ location',
    variant: 'uiTextNormal',
    action: a => startTag(a),
  },
]

const desktopActions = [
  {
    type: 'location',
    label: 'loc',
    variant: 'uiTextNormal',
    action: a => toggleMark(a),
  },
]

const formatActions = isMobileNewLine => [
  ...(isMobileOs() && isMobileNewLine ? mobileActions : desktopActions),
  {
    type: 'DIVIDER',
  },
  {
    type: 'bold',
    label: 'b',
    variant: 'uiTextNormalSemibold',
    action: a => toggleMark(a),
  },
  {
    type: 'italic',
    label: 'i',
    variant: 'uiTextNormalItalic',
    action: a => toggleMark(a),
  },
]

const formatActionButtons = editor =>
  formatActions(!editor.value.anchorBlock.text.length).reduce((acc, a, i) => {
    if (a.type === 'DIVIDER') {
      return acc.concat(
        <View
          key={i}
          borderRightColor="border.1"
          borderRightWidth={pxUnits(1)}
          marginLeft="extraSmall"
          marginRight="extraSmall"
        />
      )
    }
    return acc.concat(
      <MarkButton
        key={i}
        editor={editor}
        index={i}
        type={a.type}
        label={a.label}
        variant={a.variant}
        action={a.action}
      />
    )
  }, [])

const MarkButton = ({ editor, type, label, variant, action, ...others }) => {
  const [, dispatchEditor] = useEditorContext()
  const { value } = editor
  const isActive = value.activeMarks.some(mark => mark.type === type)

  return (
    <Button
      data-test-format-menu={type}
      variant="formatButton"
      onMouseDown={e => {
        e.preventDefault()
        dispatchEditor(action(type, { value }))
      }}
      {...others}
    >
      <Text
        variant={variant}
        pr="extraSmall"
        pl="extraSmall"
        color={isActive ? 'primary.1' : 'text.1'}
      >
        {label}
      </Text>
    </Button>
  )
}

<<<<<<< HEAD
const isActiveSelection = value => {
  const { fragment, selection } = value
  if (selection.isBlurred || selection.isCollapsed || fragment.text === '') {
    return false
  }
  return true
}

const isNewLineOnMobile = value => {
  if (value.anchorBlock) {
    if (value.anchorBlock.text.length === 0 && isMobileOs()) {
      return true
    }
  }

  return false
}

const HoverMenu = ({ editor }) => {
  // need to optomize this with hooks
  const menuRef = useRef(null)

  const updateMenu = () => {
    const menu = menuRef.current
    if (!menu) return
    const { value } = editor
    if (!isActiveSelection(value) && !isNewLineOnMobile(value)) {
      menu.removeAttribute('style')
      return
    }

    const native = window.getSelection()
    const range = native.getRangeAt(0)
    const rect = range.getBoundingClientRect()

    // CHECK FOR RANGE AND RENDER

    // eslint-disable-next-line
    const _node = editor.findDOMNode(
      value.document.getPath(value.selection.focus.key)
    )

    const isMobileNewLine = rect.width === 0

    // CHECK FOR TOP OF LINE

    const _mobileOffsetHeight = isMobileNewLine
      ? `${rect.bottom + _node.getBoundingClientRect().top + 32}px`
      : `${rect.bottom + window.pageYOffset + 10}px`

    menu.style.opacity = 1
    menu.style.pointerEvents = 'auto'
    menu.style.top = isMobileOs()
      ? _mobileOffsetHeight
      : `${rect.top + window.pageYOffset - menu.offsetHeight}px`

    // menu offset to prevent overflow
    let menuLeftOffset = 0

    if (menu.offsetWidth / 2 > rect.left + rect.width / 2) {
      menuLeftOffset =
        menu.offsetWidth / 2 - (rect.left + rect.width / 2) + space.small
    }

    if (rect.left + rect.width / 2 + menu.offsetWidth / 2 > window.innerWidth) {
      menuLeftOffset =
        window.innerWidth -
        (rect.left + rect.width / 2 + menu.offsetWidth / 2) -
        space.small
    }

    menu.style.left = `${rect.left +
      window.pageXOffset -
      menu.offsetWidth / 2 +
      rect.width / 2 +
      menuLeftOffset}px`
  }

  useEffect(() => {
    updateMenu()
  })

  return <Menu ref={menuRef}>{formatActionButtons(editor)}</Menu>
}
=======
const HoverMenu = ({ editor }) => (
  <EditorTooltip editor={editor}>{formatActionButtons(editor)}</EditorTooltip>
)
>>>>>>> 244ddf613bb01758f5eaecf0d0f1095107cb8b15

export default HoverMenu

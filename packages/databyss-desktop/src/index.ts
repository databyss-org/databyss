import { app, BrowserWindow, net, protocol, shell } from 'electron'
import url from 'url'
import { getWindowIdForGroup, initNodeDb, nodeDbRefs } from './nodeDb'
import { registerHandlers } from './eapi/handlers'
import { appState } from './eapi/handlers/state-handlers'
import { createMenus } from './menus'
import { mediaPath } from './eapi/handlers/file-handlers'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

const windows = new Set<BrowserWindow>()

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

protocol.registerSchemesAsPrivileged([
  {
    scheme: 'dbdrive',
    privileges: {
      standard: true,
      secure: true,
      supportFetchAPI: true,
    },
  },
])

export const createWindow = async () => {
  let x
  let y
  let height
  let width
  const currentWindow = BrowserWindow.getFocusedWindow()
  if (currentWindow) {
    const [currentWindowX, currentWindowY] = currentWindow.getPosition()
    x = currentWindowX + 24
    y = currentWindowY + 24
  }

  const _lastSize = appState.get('lastWindowSize')
  if (_lastSize) {
    width = _lastSize[0]
    height = _lastSize[1]
  }

  const window = new BrowserWindow({
    height,
    width,
    x,
    y,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      // enableRemoteModule: true,
    },
    titleBarStyle: 'hiddenInset',
  })

  window.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url)
    return { action: 'deny' }
  })

  // console.log('[Main]', Menu.getApplicationMenu())
  const menu = createMenus(window)

  // load the last active db, if one exists
  const lastActiveGroupId = appState.get('lastActiveGroupId')
  const localGroups = appState.get('localGroups')
  if (
    lastActiveGroupId && 
    localGroups?.find((g) => g._id === lastActiveGroupId) &&
    !getWindowIdForGroup(lastActiveGroupId)
  ) {
    await initNodeDb(window.id, lastActiveGroupId)
  } else {
    // clean up groups
    appState.set('lastActiveGroupId', null)
  }

  window.on('closed', async () => {
    console.log('[Main] shutting down the database...')
    try {
      await nodeDbRefs[window.id].current.close()
      delete nodeDbRefs[window.id]
    } catch (e) {
      console.warn('[Main] error shutting down database', e)
    }
    windows.delete(window)
  })

  window.on('focus', () => {
    if (nodeDbRefs[window.id]) {
      appState.set('lastActiveGroupId', nodeDbRefs[window.id].groupId)
    }
  })

  window.on('resized', () => {
    appState.set('lastWindowSize', window.getSize() as [number, number])
  })

  // and load the index.html of the app.
  window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  // mainWindow.webContents.openDevTools()

  windows.add(window)
  return window
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  protocol.handle('dbdrive', (request) => {
    const filePath = url.fileURLToPath(
      `file://${mediaPath()}/${request.url.slice('dbdrive://'.length)}`
    )
    console.log('[DDB] fetch', filePath)
    return net.fetch(`file://${filePath}`)
  })
  registerHandlers()
  createWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  app.quit()
})

app.on('will-quit', async (evt) => {
//   if (nodeDbRef.groupId && nodeDbRef.current) {
//     console.log('[Main] shutting down the database...')
//     evt.preventDefault()
//     try {
//       nodeDbRef.groupId = null
//       await nodeDbRef.current.close()
//     } catch (e) {
//       console.warn('[Main] error shutting down', e)
//     }
//     app.quit()
//     return
//   }
  console.log('[Main] goodbye!')
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
